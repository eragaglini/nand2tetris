
/**
 * Implements the breakout game.
 */

class Game {
   field Paddle paddle; // the player of this game
   field int direction; // the player's current direction: 
                        // 1=left, 2=right
   field Ball ball; // ball

   /** Constructs a new breakout Game. */
   constructor Game new() {
      // setup screen
		do Screen.clearScreen();
      do Screen.setColor(true);
      do Screen.drawLine(0, 248, 511, 248);
      let paddle = Paddle.new();
      let ball = Ball.new();
      let direction = 0;  // initial state is no movement
      return this;
   }

   /** Disposes this game. */
   method void dispose() {
      do paddle.dispose();
      do Memory.deAlloc(this);
      return;
   }

   /** Moves the paddle in the current direction. */
   method void movePaddle() {
      if (direction = 1) { do paddle.moveLeft(); }
      if (direction = 2) { do paddle.moveRight(); }
      do Sys.wait(5);  // delays the next movement
      return;
   }

   method bool check_collision_with_walls(Ball ball) {
      var int ball_x;
      var int ball_y;
      let ball_x = ball.getX();
      let ball_y = ball.getY();

      if ((ball_x = 10) | (ball_x = 501)) {
         do ball.bounce(true, false);
      }
      if (ball_y = 10) {
         do ball.bounce(false, true);
      }
      if (ball_y < 240) {
         return false;
      }
      return true;
   }

   method void check_collision_with_paddle(Ball ball, Paddle paddle) {
      // current coordinates of our ball
      var int ball_x;
      var int ball_y;

      // current coordinates of our paddle
      var int paddle_x;
      var int paddle_y;

      let ball_x = ball.getX();
      let ball_y = ball.getY();
      
      let paddle_x = paddle.getX();
      let paddle_y = paddle.getY();
      
      // check if ball's distance(from its middle)
      // from paddle(from its middle) is less than
      // width of paddle and ball is below a certain
      // coordinate to detect their collision
      if (Utils.distance(ball_x,ball_y, paddle_x + 25, paddle_y + 5) < 50 & (ball_y > 220 | ball_y = 220)) {
         do ball.bounce(false, true);
         return;
      }
      return;
   }
   
   /** Runs the game: handles the user's inputs and moves the paddle accordingly */
   method void run() {
      var char key;  // the key currently pressed by the user
      var boolean exit;
      let exit = false;
      // wait for space to start
      while (~(key = 32)) {
         let key = Keyboard.keyPressed();
      }

      while (~exit) {
         // waits for a key to be pressed
         let key = Keyboard.keyPressed();
         // move ball
         do ball.move();

         if (key = 81)  { let exit = true; }     // q key
         if (key = 130) { let direction = 1; }   // left arrow
         if (key = 132) { let direction = 2; }   // right arrow
         if (key = 0) { let direction = 0; }   // initial state is no movement
         if (key = 81) { let exit = true; }   // q == exit
         
         do movePaddle();
         do check_collision_with_paddle(ball, paddle);
         let exit = check_collision_with_walls(ball);
     } // while
     return;
   }
}