
/**
 * Implements the snake game.
 */

class SnakeGame {
   
   field int size;
   field Snake snake;
   field int delay;    
   // the XY position of the food pellet
   field int foodX, foodY;
   // score of the game
   field int score;

   /** Constructs a new snake Game. */
   constructor SnakeGame new() {

      // setup screen
      do Screen.clearScreen();
      do Screen.setColor(true);
      do Screen.drawLine(0, 240, 511, 240);
      let size = 8;
      // snake
      let snake = Snake.new(20, 8, size);
      //let delay = 100;
      let delay = 150;
      // score
      let score = 0;
      return this;
   }

   // draws the food pellet
   method void drawFood() {
      do Screen.setColor(true);
      do Screen.drawCircle((foodX * size) + (size/2), (foodY * size) + (size/2), (size/2 - 1));
      return;
   }

   // erase the food pellet from the screen
   method void eraseFood() {
      do Screen.setColor(false);
      do Screen.drawCircle((foodX * size) + (size/2), (foodY * size) + (size/2), (size/2 - 1));
      return;
   }

   /** Disposes this game. */
   method void dispose() {
      do snake.dispose();
      do Memory.deAlloc(this);
      return;
   }
   // check if the snake ate a food pellet
   method boolean checkFood() {
      var int snakeX, snakeY;
      let snakeX = snake.getX();
      let snakeY = snake.getY();

      if( snakeX = foodX ) {
         if( snakeY = foodY ) {
            return true;
         }
      }
      return false;
   }

   method void placeFood() {
      // get food coordinates
      let foodX = Utils.random((512/size) - 1);
      // last 2 rows are used for printing score
      let foodY = Utils.random((256/size) - 3);
      while  (checkFood()) {
         let foodX = Utils.random((512/size) - 1);
         let foodY = Utils.random((256/size) - 3);
      }
      do drawFood();
      return;
   }

   // iterate over the snake segments to check if we hit one
   method boolean checkCollisionWithSegments() {
      var SnakeSegment segment;
      var Array snake_segments;
      var int i;
      let snake_segments = snake.getSegments();
      let i = 0;
      while(i < snake.getLength()) {
         let segment = snake_segments[i];
         if (
            (segment.getX() = snake.getX()) &
            (segment.getY() = snake.getY())
         ) {
            return true;
         }
         let i = i + 1;
      }
      return false;
   }

   
   /** Runs the game: handles the user's inputs and moves the snake accordingly */
   method void run() {

      var int seed;
      var char key;  // the key currently pressed by the user
      var boolean exit;
      var int direction;
      // initial direction of the snake is 3, we are moving left
      let direction = snake.getDirection();
      let exit = false;
      let seed = 0;

      // wait for space to start
      while (~(key = 32)) {
         let key = Keyboard.keyPressed();
         let seed = seed + 1;
      }
      // initialize randomness
      do Utils.initRandomSeed(seed);
      do placeFood();

      while (~exit) {
         

         if (checkFood()) {
            do placeFood();
            let score = score + 1;
            do snake.increment();
            let delay = delay - 5;
         }

         // display score
         do Output.moveCursor(22, 5);
         do Output.printString("Score: ");
         do Output.printInt(score);

         //let exit = snake.move(direction, delay);
         //let exit = checkCollisionWithSegments();
         // if one of these two methods return true, it's game over
         let exit = snake.move(direction, delay) | checkCollisionWithSegments();

         // waits for a key to be pressed
         let key = Keyboard.keyPressed();
         if (key = 81) { let exit = true; }   // q == exit
         if (key = 131) { let direction = 1; }   // up arrow
         if (key = 133) { let direction = 2; }   // down arrow
         if (key = 130) { let direction = 3; }   // left arrow
         if (key = 132) { let direction = 4; }   // right arrow
         
     } // while
     return;
   }
}