
/**
 * Implements a snake
 */

class Snake {

    field int x, y, size, direction, histX, histY;
    field Array snake_segments;
    field int length;

   /** Constructs a new snake Game. */
   constructor Snake new(int Ax, int Ay, int Asize) {
    let x = Ax;
    let y = Ay;
    let size = Asize;
    let direction = 3;
    let length = 0;
    let snake_segments = Array.new(100);
    do draw();
    return this;
   }

   /** Disposes this game. */
   method void dispose() {
    var snake_segments seg;
    var int i;
    let i = 0;
    while (i < snake_segments.Length()) {
        let seg = snake_segments[i];
        do seg.dispose();
        let i = i + 1;
    }
    do Memory.deAlloc(this);
    return;
   }

   /** Draws the snake on the screen. */
   method void draw() {
	do Screen.setColor(true);
    // test
	//do Screen.drawRectangle(x * size, y * size, (x*size) + size, (y*size) + size);
    do Screen.drawRectangle(x * size, y * size, (x*size) + (size - 1), (y*size) + (size - 1));
    return;
   }

   /** Erase the snake from the screen. */
   method void erase() {
	do Screen.setColor(false);
    // test
	//do Screen.drawRectangle(x * size, y * size, (x*size) + (size - 1), (y*size) + (size - 1));
    do Screen.drawRectangle(x * size, y * size, (x*size) + (size - 1), (y*size) + (size - 1));
    return;
   }

   method void increment() {
    var SnakeSegment newSeg;
    let newSeg = SnakeSegment.new(histX, histY, size);
    let snake_segments[length] = newSeg;
    let length = length + 1;
    return;
   }

   /** Moves the snake up by 2 pixels. */
   method void moveUp() {
    if (y > 0) {
        do erase();
        let y = y - 1;
        do draw();
    }
    return;
   }

   /** Moves the snake down by 2 pixels. */
   method void moveDown() {
    //if (y < ((256 / size) - 1)){
    // last two rows are used for printing score
    if (y < ((256 / size) - 3)){
        do erase();
        let y = y + 1;
        do draw();
      }
      return;
   }

   /** Moves the snake left by 2 pixels. */
   method void moveLeft() {
      if (x > 0) {
        do erase();
        let x = x - 1;
        do draw();
      }
      return;
   }

   /** Moves the snake right by size pixels. */
   method void moveRight() {
    if (x < ((512 / size) - 1)){
        do erase();
        let x = x + 1;
        do draw();
      }
      return;
   }
   
   /** Runs the game: handles the user's inputs and moves the snake accordingly */
   method void move(int new_direction, int delay) {

    var int i;
    var SnakeSegment segment;
    var SnakeSegment next_segment;
    var bool to_erase;

    let to_erase = true;
    let i = length - 1;    
    let histX = x;
    let histY = y;

    // going up is allowed only if we are currently moving left or right
    if (new_direction = 1) {
        if (~(direction = 2)){
            do moveUp();
            do setDirection(new_direction);
        }
        else {
            do moveDown();
        }
    }
    // going down is allowed only if we are currently moving left or right
    if (new_direction = 2) {
        if (~(direction = 1)){
            do moveDown();
            do setDirection(new_direction);
        }
        else {
            do moveUp();
        }
    }
    // going left is allowed only if we are currently moving up or down
    if (new_direction = 3) {
        if (~(direction = 4)){
            do moveLeft();
            do setDirection(new_direction);
        }
        else {
            do moveRight();
        }
    }
    // going right is allowed only if we are currently moving up or down
    if (new_direction = 4) {
        if (~(direction = 3)){
            do moveRight();
            do setDirection(new_direction);
        }
        else {
            do moveLeft();
        }
    }

    // snake movement
    // starting from last segment we move it forward in place of the 
    // following
    
    while (i > 0) {
        let segment = snake_segments[i];
        let next_segment = snake_segments[i - 1];
        do segment.move(next_segment.getX(), next_segment.getY(), to_erase);
        let i = i - 1;
        let to_erase = false;
    } 
    
    // finally we move the first segment to histX and histY
    if (
        (length > 1) |
        (length = 1)
    ) {
        let segment = snake_segments[0];
        do segment.move(histX, histY, to_erase);
    }

    do Sys.wait(delay);
    return;
   }

   method int getDirection() {
    return direction;
   }
   method void setDirection(int new_direction) {
    let direction = new_direction;
    return;
   }
   method int getX() {
    return x;
   }
   method int getY() {
    return y;
   }
}